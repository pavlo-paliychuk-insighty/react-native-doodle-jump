{"version":3,"sources":["../../src/loaders/bitmapFontParser.js"],"names":["parse","bitmapFontParser","resource","next","data","type","TYPE","XML","getElementsByTagName","length","getAttribute","xmlUrl","isDataUrl","path","dirname","url","baseUrl","charAt","replace","pages","textures","loadOptions","crossOrigin","loadType","LOAD_TYPE","IMAGE","metadata","imageMetadata","parentResource","x","textureUrl","TextureCache","push","add","name","nextTextures","nextTextureUrl","bitmapFont","registerFont"],"mappings":"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","file":"bitmapFontParser.js","sourcesContent":["import * as path from 'path';\nimport { utils } from '../core';\nimport { Resource } from 'resource-loader';\nimport { BitmapText } from '../extras';\n\n/**\n * Register a BitmapText font from loader resource.\n *\n * @function parseBitmapFontData\n * @memberof PIXI.loaders\n * @param {PIXI.loaders.Resource} resource - Loader resource.\n * @param {PIXI.Texture|PIXI.Texture[]} textures - List of textures for each page.\n */\nexport function parse(resource, textures)\n{\n    resource.bitmapFont = BitmapText.registerFont(resource.data, textures);\n}\n\nexport default function ()\n{\n    return function bitmapFontParser(resource, next)\n    {\n        // skip if no data or not xml data\n        if (!resource.data || resource.type !== Resource.TYPE.XML)\n        {\n            next();\n\n            return;\n        }\n\n        // skip if not bitmap font data, using some silly duck-typing\n        if (resource.data.getElementsByTagName('page').length === 0\n            || resource.data.getElementsByTagName('info').length === 0\n            || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null\n        )\n        {\n            next();\n\n            return;\n        }\n\n        let xmlUrl = !resource.isDataUrl ? path.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (xmlUrl === '.')\n            {\n                xmlUrl = '';\n            }\n\n            if (this.baseUrl && xmlUrl)\n            {\n                // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n                if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/')\n                {\n                    xmlUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from xmlUrl\n        xmlUrl = xmlUrl.replace(this.baseUrl, '');\n\n        // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/')\n        {\n            xmlUrl += '/';\n        }\n\n        const pages = resource.data.getElementsByTagName('page');\n        const textures = [];\n        const loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            loadType: Resource.LOAD_TYPE.IMAGE,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n\n        for (let x = 0; x < pages.length; ++x)\n        {\n            const textureUrl = xmlUrl + pages[x].getAttribute('file');\n\n            if (utils.TextureCache[textureUrl])\n            {\n                textures.push(utils.TextureCache[textureUrl]);\n            }\n            else\n            {\n                // load the texture for the font\n                this.add(`${resource.name}_image${x}`, textureUrl, loadOptions, () =>\n                {\n                    const nextTextures = [];\n\n                    for (let x = 0; x < pages.length; ++x)\n                    {\n                        const nextTextureUrl = xmlUrl + pages[x].getAttribute('file');\n\n                        if (utils.TextureCache[nextTextureUrl])\n                        {\n                            nextTextures.push(utils.TextureCache[nextTextureUrl]);\n                        }\n                        else\n                        {\n                            return;\n                        }\n                    }\n                    parse(resource, nextTextures);\n                    next();\n                });\n            }\n        }\n\n        if (textures.length === pages.length)\n        {\n            parse(resource, textures);\n            next();\n        }\n    };\n}\n"]}